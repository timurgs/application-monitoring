# Generated by Django 4.1.2 on 2022-11-03 21:14

import backend.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('position', models.CharField(blank=True, max_length=40, verbose_name='Должность')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 20 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=20, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': ('Пользователь',),
                'verbose_name_plural': ('Список пользователей',),
                'ordering': ('username',),
            },
            managers=[
                ('objects', backend.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(max_length=10, verbose_name='Наименование округа')),
                ('country_code', models.PositiveSmallIntegerField(verbose_name='Код округа')),
                ('district_name', models.CharField(max_length=100, verbose_name='Наименование района')),
                ('district_code', models.PositiveSmallIntegerField(verbose_name='Код района')),
                ('problem_address', models.CharField(max_length=100, unique=True, verbose_name='Адрес проблемы')),
                ('unom', models.PositiveIntegerField(unique=True, verbose_name='УНОМ')),
                ('management_company', models.CharField(max_length=100, verbose_name='Наименование управляющей компании')),
            ],
            options={
                'verbose_name': 'Адрес',
                'verbose_name_plural': 'Список адресов',
            },
        ),
        migrations.CreateModel(
            name='ClosingResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consumed_material', models.CharField(blank=True, max_length=200, verbose_name='Израсходованный материал')),
                ('security_events_sign', models.CharField(max_length=3, verbose_name='Признак проведения охранных мероприятий')),
                ('security_events_time', models.DateTimeField(blank=True, null=True, verbose_name='Время проведения охранных мероприятий')),
                ('actions_taken_during_security_measures', models.CharField(blank=True, max_length=500, verbose_name='Описание выполненных действий при проведении охранных мероприятий')),
                ('effectiveness', models.CharField(max_length=33, verbose_name='Результативность')),
                ('efficiency_code', models.CharField(max_length=9, verbose_name='Код результативности')),
                ('being_under_revision_sign', models.CharField(max_length=3, verbose_name='Признак нахождения на доработке')),
                ('sign_alerted', models.CharField(max_length=3, verbose_name='Признак “Оповещен”')),
                ('closing_date', models.DateTimeField(auto_now=True, verbose_name='Дата закрытия')),
            ],
            options={
                'verbose_name': 'Результат закрытия',
                'verbose_name_plural': 'Список результатов закрытия',
            },
        ),
        migrations.CreateModel(
            name='Defect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=33, verbose_name='Наименование категории')),
                ('category_root_id', models.PositiveIntegerField(verbose_name='Корневой идентификатор категории')),
                ('category_code', models.CharField(blank=True, max_length=100, verbose_name='Код категории')),
                ('short_name', models.CharField(max_length=150, verbose_name='Краткое наименование')),
                ('identifier', models.PositiveIntegerField(verbose_name='Идентификатор')),
                ('code', models.CharField(max_length=150, verbose_name='Код')),
                ('sign_return_for_revision', models.CharField(max_length=3, verbose_name='Признак возврата на доработку')),
            ],
            options={
                'verbose_name': 'Дефект',
                'verbose_name_plural': 'Список дефектов',
            },
        ),
        migrations.CreateModel(
            name='ImplementingOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Наименование')),
                ('identifier', models.PositiveIntegerField(unique=True, verbose_name='Идентификатор')),
                ('inn', models.PositiveBigIntegerField(unique=True, verbose_name='ИНН')),
                ('business_role', models.CharField(max_length=20, verbose_name='Бизнес-роль')),
            ],
            options={
                'verbose_name': 'Организация-исполнитель',
                'verbose_name_plural': 'Организации-исполнители',
            },
        ),
        migrations.CreateModel(
            name='MarmExecutor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_reason_refusal', models.CharField(max_length=50, unique=True, verbose_name='Наименование причины отказа')),
                ('failure_reason_id', models.PositiveIntegerField(unique=True, verbose_name='Идентификатор причины отказа')),
            ],
            options={
                'verbose_name': 'МАРМ (Исполнитель)',
                'verbose_name_plural': 'МАРМ (Исполнители)',
                'ordering': ('failure_reason_id',),
            },
        ),
        migrations.CreateModel(
            name='MarmImplementingOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_reason_refusal', models.CharField(max_length=51, unique=True, verbose_name='Наименование причины отказа')),
                ('failure_reason_id', models.PositiveIntegerField(unique=True, verbose_name='Идентификатор причины отказа')),
            ],
            options={
                'verbose_name': 'МАРМ (Организация-исполнитель)',
                'verbose_name_plural': 'МАРМ (Организации-исполнители)',
                'ordering': ('failure_reason_id',),
            },
        ),
        migrations.CreateModel(
            name='ODS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=109, unique=True, verbose_name='Номер ОДС')),
            ],
            options={
                'verbose_name': 'ОДС',
                'verbose_name_plural': 'ОДС',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Наименование')),
                ('identifier', models.PositiveIntegerField(unique=True, verbose_name='Идентификатор')),
                ('inn', models.PositiveBigIntegerField(unique=True, verbose_name='ИНН')),
                ('business_role', models.CharField(max_length=20, verbose_name='Бизнес-роль')),
            ],
            options={
                'verbose_name': 'Организация',
                'verbose_name_plural': 'Организации',
            },
        ),
        migrations.CreateModel(
            name='WorkPerformedType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('work_performed_type', models.CharField(max_length=250, unique=True, verbose_name='Вид выполненных работ')),
                ('root_version_id', models.PositiveSmallIntegerField(unique=True, verbose_name='Идентификатор корневой версии')),
                ('defects', models.ManyToManyField(blank=True, related_name='work_performed_types', to='backend.defect', verbose_name='Дефекты')),
            ],
            options={
                'verbose_name': 'Вид выполненных работ',
                'verbose_name_plural': 'Список видов выполненных работ',
                'ordering': ('root_version_id',),
            },
        ),
        migrations.CreateModel(
            name='SecurityEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Наименование')),
                ('root_version_id', models.PositiveIntegerField(unique=True, verbose_name='Идентификатор корневой версии')),
                ('term', models.DateTimeField(verbose_name='Срок')),
                ('work_performed_type_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='security_events', to='backend.workperformedtype', verbose_name='Вид выполненных работ')),
            ],
            options={
                'verbose_name': 'Охранные мероприятия',
                'verbose_name_plural': 'Список охранных мероприятий',
                'ordering': ('root_version_id',),
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt', models.DateTimeField(auto_now_add=True, verbose_name='Дата')),
                ('review', models.TextField(max_length=200, verbose_name='Отзыв')),
                ('assessment_quality_work', models.PositiveSmallIntegerField(max_length=1, verbose_name='Оценка качества выполнения работ')),
                ('closing_result_id', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.closingresult', verbose_name='Результат закрытия')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Список отзывов',
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('root_id', models.PositiveIntegerField(unique=True, verbose_name='Корневой ИД')),
                ('version_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='ИД версии')),
                ('number', models.CharField(max_length=11, unique=True, verbose_name='Номер')),
                ('unique_public_services_appeal_number', models.CharField(blank=True, max_length=27, verbose_name='Уникальный номер обращения ГУ (mos.ru)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата начала действия версии')),
                ('source_name', models.CharField(max_length=23, verbose_name='Наименование источника поступления')),
                ('source_code', models.CharField(max_length=10, verbose_name='Код источника поступления')),
                ('creator_name', models.CharField(max_length=20, verbose_name='Имя создателя')),
                ('incident_sign', models.CharField(max_length=3, verbose_name='Признак инцидента')),
                ('parent_application_root_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='Корневой идентификатор материнской заявки')),
                ('parent_application_number', models.CharField(blank=True, max_length=11, verbose_name='Номер материнской заявки')),
                ('comments', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Комментарии')),
                ('description', models.TextField(max_length=1000, verbose_name='Описание')),
                ('question', models.TextField(blank=True, max_length=1000, verbose_name='Наличие у заявителя вопроса')),
                ('urgency_category_name', models.CharField(max_length=9, verbose_name='Наименование категории срочности')),
                ('urgency_category_code', models.CharField(max_length=9, verbose_name='Код категории срочности')),
                ('entrance', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Подъезд')),
                ('floor', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Этаж')),
                ('apartment', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Квартира')),
                ('status_name', models.CharField(max_length=17, verbose_name='Наименование статуса')),
                ('status_code', models.CharField(max_length=17, verbose_name='Код статуса')),
                ('desired_time_from', models.CharField(blank=True, max_length=70, verbose_name='Желаемое время с')),
                ('desired_time_before', models.CharField(blank=True, max_length=70, verbose_name='Желаемое время до')),
                ('payment_category_name', models.CharField(max_length=17, verbose_name='Наименование категории платности')),
                ('payment_category_code', models.CharField(max_length=14, verbose_name='Код категории платности')),
                ('card_payment_sign', models.CharField(max_length=3, verbose_name='Признак оплаты картой')),
                ('address_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='backend.address', verbose_name='Адрес')),
                ('defect_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='backend.defect', verbose_name='Дефект')),
                ('implementing_organization_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='backend.implementingorganization', verbose_name='Организация-исполнитель')),
                ('user_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='requests', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Заявка',
                'verbose_name_plural': 'Список заявок',
                'ordering': ('number',),
            },
        ),
        migrations.CreateModel(
            name='Refinement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('return_count', models.PositiveSmallIntegerField(verbose_name='Кол-во возвратов')),
                ('last_return_date', models.DateTimeField(auto_now=True, verbose_name='Дата последнего возврата')),
                ('closing_result_id', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.closingresult', verbose_name='Результат закрытия')),
            ],
            options={
                'verbose_name': 'Доработка',
                'verbose_name_plural': 'Список доработок',
            },
        ),
        migrations.AddField(
            model_name='closingresult',
            name='marm_executor_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='closing_results', to='backend.marmexecutor', verbose_name='МАРМ (Исполнитель)'),
        ),
        migrations.AddField(
            model_name='closingresult',
            name='marm_implementing_organization_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='closing_results', to='backend.marmimplementingorganization', verbose_name='МАРМ (Организация-исполнитель)'),
        ),
        migrations.AddField(
            model_name='closingresult',
            name='request_id',
            field=models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, to='backend.request', verbose_name='Заявка'),
        ),
        migrations.AddField(
            model_name='address',
            name='ods_id',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='ods', to='backend.ods', verbose_name='ОДС'),
        ),
        migrations.AddField(
            model_name='user',
            name='implementing_organization_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='implementing_organizations', to='backend.implementingorganization', verbose_name='Организация-исполнитель'),
        ),
        migrations.AddField(
            model_name='user',
            name='organization_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to='backend.organization', verbose_name='Организация'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('organization_id__isnull', False), ('implementing_organization_id__isnull', False), _connector='OR'), name='not_both_null'),
        ),
    ]
